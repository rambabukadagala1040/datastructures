package org.example.linkedList;

import java.util.HashSet;

public class LinkedList {

    private Node head;
    private Node tail;
    private int length;

     class Node {
        int value;
        Node next;
        Node(int value){
            this.value = value;
        }
    }

    public LinkedList(int value){
         Node newNode = new Node(value);
         head = newNode;
         tail = newNode;
         length = 1;
    }

    public void printList(){
         Node temp =  head;
         while (temp != null){
             System.out.println(temp.value);
             temp = temp.next;
         }
    }

    public void append(int value){
         Node newNode = new Node(value);
         if(length ==0){
             head = newNode;
             tail = newNode;
         } else {
             tail.next = newNode;
             tail = newNode;
         }
         length++;
    }

    public Node removeLast(){
         Node prev;
         Node temp = head;
         prev = head;
         if(length ==0){
             System.out.println("LL is empty");
             return null;
         }
         else if(length ==1){
             head = null;
             return temp;
         }
         else {

             while (temp.next != null){
                 prev = temp;
                 temp = temp.next;
             }
             tail = prev;
             tail.next = null;
             length--;

             return prev;
         }
    }

    public void prepend(int value){
         Node newNode = new Node(value);
         if(length ==0){
             head = newNode;
             tail = newNode;
         } else {
             newNode.next = head;
             head = newNode;
         }
         length ++;

    }

    public Node removeFirst(){

         if(length == 0){
             return  null;
         } else {
             Node temp = head;
             head = head.next;
             length--;

             if(length ==0){
                 tail = null;
             }
             return temp;
         }
    }

    public Node get(int index){
         if(index < 0 || index > length){
             return null;
         } else {
             Node temp = head;
             for(int i=0; i<index; i++){
                 temp = temp.next;
             }
             return temp;
         }

    }

    public boolean set(int index, int value){
         Node temp = get(index);
         if(temp != null){
             temp.value = value;
             return true;
         } else {
             return false;
         }
    }

    public boolean insert(int index, int value){
         if(index < 0 || index > length) {
             return false;
         }
         if(length ==1){
             prepend(value);
         }
         if(index == length ){
             append(value);
         }
         Node newNode = new Node(value);
         Node temp = get(index);
         newNode.next = temp.next;
         temp.next = newNode;
         return true;

    }

    public Node remove(int index){
         if(index < 0 || index >= length){
             return null;
         }
         if(index ==0){
           return   removeFirst();
         }
         if((index +1) == length){
             return removeLast();
         }
        Node prev = get(index-1);
        Node temp = prev.next;
        prev.next = temp.next;
        temp.next = null;
        length--;
        return temp;
    }

    public void reverse (){
        Node temp = head;
        head = tail;
        tail = temp;
        Node after = temp.next;
        Node before = null;
        for(int i=0; i<length; i++){
            after = temp.next;
            temp.next = before;
            before = temp;
            temp = after;
        }
    }

    public Node findMiddle(){
         Node slow = head;
         Node fast = head;
         while (fast != null && fast.next != null){
             slow = slow.next;
             fast = fast.next.next;
         }
         return slow;
    }

    public boolean hasLoop(){
         Node slow = head;
         Node fast = head;
        while (fast !=null && fast.next != null){
             slow = slow.next;
             fast = fast.next.next;
             if(slow==fast){
                 return true;
             }
         }
         return false;
    }

    public Node kthNodeFromEnd(int value){
         if(value > length) return null;
         Node kth = head;
        Node y =  getKth((length - value), kth);
         return y;
    }

    public Node getKth(int value, Node x){
         for(int i=0;i<value;i++){
             x = x.next;
         }
         return x;
    }


    public void rearrangeLL(int x){
         if(head == null) System.out.println("Linked list is empty");
         Node dummy1 = new Node(0);
         Node dummy2 = new Node(0);

         Node prev1 = dummy1;
         Node prev2 = dummy2;

         Node current = head;

         while (current != null){
             if(current.value < x){
                 prev1.next = current;
                 prev1 = current;
             } else{
                 prev2.next = current;
                 prev2 = current;
             }
             current = current.next;
         }
         prev2.next = null;
         prev1.next = dummy2.next;
         head = dummy1.next;

    }

    public void removeDuplicates(){
         Node current = head;
         Node previous = null;
        HashSet<Integer> values = new HashSet<>();
        while (current != null){
            if(values.contains(current.value)){
                previous.next = current.next;
            }else {
                values.add(current.value);
                previous = current;
            }
            current = current.next;
        }

    }
    public Node getHead(){
         return head;
    }

    public Node getTail(){
        return tail;
    }

    public void getLength(){
         System.out.println("length " + length);
    }
}
